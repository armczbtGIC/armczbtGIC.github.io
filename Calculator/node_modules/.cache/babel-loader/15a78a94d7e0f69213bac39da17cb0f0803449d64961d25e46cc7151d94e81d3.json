{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      // This is the private data section which can be used inside this component\n      inputNumber: \"\",\n      operator: null,\n      previousValue: null,\n      history: [],\n      memory: 0\n    };\n  },\n  methods: {\n    showNumber(number) {\n      // Assign number when user click to the inputNumber data\n      // To access private data from methods, use (this.)\n      if (number === \".\" && this.inputNumber.includes(\".\")) {\n        // prevent adding more than one decimal point\n        return;\n      }\n      this.inputNumber += number;\n    },\n    changeSign() {\n      const save = Number(this.inputNumber);\n      const res = save * -1;\n      this.inputNumber = res;\n    },\n    clearDisplay() {\n      this.inputNumber = \"\";\n      this.operator = null;\n      this.previousValue = null;\n      this.history = [];\n    },\n    performOperation(operator) {\n      if (this.operator && this.inputNumber) {\n        this.calculateResult();\n      }\n      this.operator = operator;\n      this.previousValue = Number(this.inputNumber);\n      this.inputNumber = \"\";\n      this.history.push(operator);\n    },\n    calculateResult() {\n      const currentValue = Number(this.inputNumber);\n      let result;\n      switch (this.operator) {\n        case \"+\":\n          result = this.previousValue + currentValue;\n          break;\n        case \"-\":\n          result = this.previousValue - currentValue;\n          break;\n        case \"*\":\n          result = this.previousValue * currentValue;\n          break;\n        case \"/\":\n          result = this.previousValue / currentValue;\n          break;\n        default:\n          return;\n      }\n      this.history.push(currentValue);\n      this.inputNumber = result.toString();\n      this.operator = null;\n      this.previousValue = null;\n    },\n    memoryClear() {\n      this.memory = 0;\n    },\n    memoryRecall() {\n      this.inputNumber = this.memory.toString();\n    },\n    memoryAdd() {\n      const currentValue = Number(this.inputNumber);\n      this.memory += currentValue;\n    },\n    memorySubtract() {\n      const currentValue = Number(this.inputNumber);\n      this.memory -= currentValue;\n    }\n  }\n};","map":{"version":3,"names":["name","components","data","inputNumber","operator","previousValue","history","memory","methods","showNumber","number","includes","changeSign","save","Number","res","clearDisplay","performOperation","calculateResult","push","currentValue","result","toString","memoryClear","memoryRecall","memoryAdd","memorySubtract"],"sources":["src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div class=\"container\">\n      <table>\n        <tr>\n          <td colspan=\"5\">\n            <div id=\"screen\">\n              <span id=\"screen_top\">M={{memory}}</span>\n              <div id=\"screen_bottom\">\n                <!-- v-text is a directive that is used to replace the content of HTML tag with private data -->\n                <!-- It will update the content automatically when data is changed. It is called data reactive -->\n                <span v-text=\"inputNumber\" id=\"operand1\">0</span>\n                <span id=\"operator\"></span>\n                <span id=\"operand2\"></span>\n              </div>\n              <!-- <span id=\"screen_bottom\">0</span> -->\n            </div>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <button v-on:click=\"memoryClear()\" type=\"button\" class=\"btn btn-warning\">MC</button>\n          </td>\n          <td>\n            <button v-on:click=\"memoryRecall()\" type=\"button\" class=\"btn btn-warning\">MR</button>\n          </td>\n          <td>\n            <button v-on:click=\"memorySubstract()\" type=\"button\" class=\"btn btn-warning\">M-</button>\n          </td>\n          <td>\n            <button v-on:click=\"memoryAdd()\" type=\"button\" class=\"btn btn-warning\">M+</button>\n          </td>\n          <td>\n            <button type=\"button\" class=\"btn btn-light\">\n              <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i>\n            </button>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <button v-on:click=\"showNumber(7)\" type=\"button\" class=\"btn btn-light\">7</button>\n          </td>\n          <td>\n            <button v-on:click=\"showNumber(8)\" type=\"button\" class=\"btn btn-light\">8</button>\n          </td>\n          <td>\n            <button v-on:click=\"showNumber(9)\" type=\"button\" class=\"btn btn-light\">9</button>\n          </td>\n          <td>\n            <button v-on:click=\"performOperation('/')\" type=\"button\" class=\"btn btn-secondary\">รท</button>\n          </td>\n          <td>\n            <button v-on:click=\"changeSign()\" type=\"button\" class=\"btn btn-light\">+/-</button>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <button v-on:click=\"showNumber(4)\" type=\"button\" class=\"btn btn-light\">4</button>\n          </td>\n          <td>\n            <button v-on:click=\"showNumber(5)\" type=\"button\" class=\"btn btn-light\">5</button>\n          </td>\n          <td>\n            <button v-on:click=\"showNumber(6)\" type=\"button\" class=\"btn btn-light\">6</button>\n          </td>\n          <td>\n            <button v-on:click=\"performOperation('*')\" type=\"button\" class=\"btn btn-secondary\">x</button>\n          </td>\n          <td>\n            <button v-on:click=\"performOperation('-')\" type=\"button\" class=\"btn btn-secondary\">-</button>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <button\n              v-on:click=\"showNumber(1)\"\n              type=\"button\"\n              class=\"btn btn-light\"\n            >\n              1\n            </button>\n          </td>\n          <td>\n            <button v-on:click=\"showNumber(2)\" type=\"button\" class=\"btn btn-light\">2</button>\n          </td>\n          <td>\n            <button v-on:click=\"showNumber(3)\" type=\"button\" class=\"btn btn-light\">3</button>\n          </td>\n          <td rowspan=\"2\">\n            <button v-on:click=\"performOperation('+')\" type=\"button\" class=\"btn btn-secondary long-btn\">+</button>\n          </td>\n          <td rowspan=\"2\">\n            <button v-on:click=\"calculateResult()\" type=\"button\" class=\"btn btn-primary long-btn\">=</button>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <button v-on:click=\"clearDisplay()\" type=\"button\" class=\"btn btn-danger\">C</button>\n          </td>\n          <td>\n            <button v-on:click=\"showNumber(0)\" type=\"button\" class=\"btn btn-light\">0</button>\n          </td>\n          <td>\n            <button v-on:click=\"showNumber('.')\" type=\"button\" class=\"btn btn-light\">.</button>\n          </td>\n        </tr>\n      </table>\n    </div>\n    <div class=\"alert alert-danger\" id=\"message_panel\" role=\"alert\">\n      something wrong here\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App',\n  components: {},\n  data() {\n    return {\n      // This is the private data section which can be used inside this component\n      inputNumber: \"\",\n      operator: null,\n      previousValue: null,\n      history: [],\n      memory: 0,\n    };\n  },\n  methods: {\n    showNumber(number) {\n      // Assign number when user click to the inputNumber data\n      // To access private data from methods, use (this.)\n      if (number === \".\" && this.inputNumber.includes(\".\")) {\n        // prevent adding more than one decimal point\n        return;\n      }\n      this.inputNumber += number;\n    },\n    changeSign(){\n      const save = Number(this.inputNumber);\n      const res = save*-1;\n      this.inputNumber = res;\n    },\n    clearDisplay() {\n      this.inputNumber = \"\";\n      this.operator = null;\n      this.previousValue = null;\n      this.history = [];\n    },\n    performOperation(operator) {\n      if (this.operator && this.inputNumber) {\n        this.calculateResult();\n      }\n      this.operator = operator;\n      this.previousValue = Number(this.inputNumber);\n      this.inputNumber = \"\";\n      this.history.push(operator);\n    },\n    calculateResult() {\n      const currentValue = Number(this.inputNumber);\n      let result;\n      switch (this.operator) {\n        case \"+\":\n          result = this.previousValue + currentValue;\n          break;\n        case \"-\":\n          result = this.previousValue - currentValue;\n          break;\n        case \"*\":\n          result = this.previousValue * currentValue;\n          break;\n        case \"/\":\n          result = this.previousValue / currentValue;\n          break;\n        default:\n          return;\n      }\n      this.history.push(currentValue);\n      this.inputNumber = result.toString();\n      this.operator = null;\n      this.previousValue = null;\n    },\n    memoryClear() {\n      this.memory = 0;\n    },\n    memoryRecall() {\n      this.inputNumber = this.memory.toString();\n    },\n    memoryAdd() {\n      const currentValue = Number(this.inputNumber);\n      this.memory += currentValue;\n    },\n    memorySubtract() {\n      const currentValue = Number(this.inputNumber);\n      this.memory -= currentValue;\n    }\n  },\n};\n</script>\n\n\n\n\n\n\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n.container {\n  margin-top: 10em;\n  width: 300px;\n  border: 1px solid black;\n  padding-top: 20px;\n  padding-bottom: 20px;\n}\ntable {\n  border-spacing: 7px;\n  border-collapse: separate;\n}\n#screen {\n  border: 1px solid black;\n  padding: 7px;\n  width: 100%;\n  height: 4em;\n}\n#screen_top {\n  display: block;\n  font-size: 0.8rem;\n}\n#screen_bottom {\n  font-size: 1.8rem;\n  display: block;\n  text-align: right;\n}\n#operand2 {\n  background-color: skyblue;\n}\n#operator {\n  background-color: rosybrown;\n}\n.button-row {\n  display: flex;\n  justify-content: space-between;\n}\nbutton {\n  width: 45px;\n}\n.long-btn {\n  display: inline-block;\n  height: 80px;\n}\n\n/* Message panel */\n#message_panel {\n  width: 300px;\n  margin-top: 1em;\n  display: none;\n  margin-left: auto;\n  margin-right: auto;\n}\n</style>\n"],"mappings":";AAmHA;EACAA,IAAA;EACAC,UAAA;EACAC,KAAA;IACA;MACA;MACAC,WAAA;MACAC,QAAA;MACAC,aAAA;MACAC,OAAA;MACAC,MAAA;IACA;EACA;EACAC,OAAA;IACAC,WAAAC,MAAA;MACA;MACA;MACA,IAAAA,MAAA,iBAAAP,WAAA,CAAAQ,QAAA;QACA;QACA;MACA;MACA,KAAAR,WAAA,IAAAO,MAAA;IACA;IACAE,WAAA;MACA,MAAAC,IAAA,GAAAC,MAAA,MAAAX,WAAA;MACA,MAAAY,GAAA,GAAAF,IAAA;MACA,KAAAV,WAAA,GAAAY,GAAA;IACA;IACAC,aAAA;MACA,KAAAb,WAAA;MACA,KAAAC,QAAA;MACA,KAAAC,aAAA;MACA,KAAAC,OAAA;IACA;IACAW,iBAAAb,QAAA;MACA,SAAAA,QAAA,SAAAD,WAAA;QACA,KAAAe,eAAA;MACA;MACA,KAAAd,QAAA,GAAAA,QAAA;MACA,KAAAC,aAAA,GAAAS,MAAA,MAAAX,WAAA;MACA,KAAAA,WAAA;MACA,KAAAG,OAAA,CAAAa,IAAA,CAAAf,QAAA;IACA;IACAc,gBAAA;MACA,MAAAE,YAAA,GAAAN,MAAA,MAAAX,WAAA;MACA,IAAAkB,MAAA;MACA,aAAAjB,QAAA;QACA;UACAiB,MAAA,QAAAhB,aAAA,GAAAe,YAAA;UACA;QACA;UACAC,MAAA,QAAAhB,aAAA,GAAAe,YAAA;UACA;QACA;UACAC,MAAA,QAAAhB,aAAA,GAAAe,YAAA;UACA;QACA;UACAC,MAAA,QAAAhB,aAAA,GAAAe,YAAA;UACA;QACA;UACA;MAAA;MAEA,KAAAd,OAAA,CAAAa,IAAA,CAAAC,YAAA;MACA,KAAAjB,WAAA,GAAAkB,MAAA,CAAAC,QAAA;MACA,KAAAlB,QAAA;MACA,KAAAC,aAAA;IACA;IACAkB,YAAA;MACA,KAAAhB,MAAA;IACA;IACAiB,aAAA;MACA,KAAArB,WAAA,QAAAI,MAAA,CAAAe,QAAA;IACA;IACAG,UAAA;MACA,MAAAL,YAAA,GAAAN,MAAA,MAAAX,WAAA;MACA,KAAAI,MAAA,IAAAa,YAAA;IACA;IACAM,eAAA;MACA,MAAAN,YAAA,GAAAN,MAAA,MAAAX,WAAA;MACA,KAAAI,MAAA,IAAAa,YAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}